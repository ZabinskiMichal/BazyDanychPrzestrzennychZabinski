create schema zad3
create extension POSTGIS

SELECT * FROM zad3."T2018_KAR_BUILDINGS"
SELECT * FROM zad3."T2019_KAR_BUILDINGS"

SELECT * FROM zad3."T2018_KAR_POI_TABLE"
SELECT * FROM zad3."T2019_KAR_STREETS"

--ok
-- zad1 - Znajdź budynki, które zostały wybudowane lub wyremontowane na przestrzeni roku (zmiana
-- pomiędzy 2018 a 2019

SELECT * FROM zad3."T2019_KAR_BUILDINGS" e
WHERE  NOT EXISTS (SELECT FROM zad3."T2018_KAR_BUILDINGS" f WHERE e.geom = f.geom);

--wykorzystamt left joina na polu id
--lewa tabela to tabela pierwsza, czyli ta z ktorej chcemy wsztkie rekordy - rekordyz drugiej tabeli
--checmy wszystkie z nowej tabeli
-- II opcja

--bierzemy wszysto z tabeli 2019
--koklejamy wartosci z tabeli 2018 na podstawie geometrii
--pozostawiamy tylko obiekty rozniace sie od siebie, czyli takie ktore NIE MAJA id, 
--odpowiadajaceu jakiemus id w tabeli z 2019

SELECT pop.id, pop.name, ns.id, ns.name FROM zad3."T2019_KAR_BUILDINGS" ns
LEFT JOIN zad3."T2018_KAR_BUILDINGS" pop ON ns.geom = pop.geom
WHERE pop.id IS NULL 


--zad2 - Zaimportuj dane dotyczące POIs (Points of Interest) z obu lat:
-- T2018_KAR_POI_TABLE
-- T2019_KAR_POI_TABLE
--Znajdź ile nowych POI pojawiło się w promieniu 500 m od wyremontowanych lub
--wybudowanych budynków, które znalezione zostały w zadaniu 1. Policz je wg ich kategorii.

--nowe poi
SELECT poi19.* FROM zad3."T2019_KAR_POI_TABLE" as poi19
LEFT JOIN zad3."T2018_KAR_POI_TABLE" as poi18 ON poi18.geom = poi19.geom
WHERE poi18.id IS NULL

SELECT np.poi_name FROM (SELECT poi19.* FROM zad3."T2019_KAR_POI_TABLE" as poi19
LEFT JOIN zad3."T2018_KAR_POI_TABLE" as poi18 ON poi18.id = poi19.id
WHERE poi18.id IS NULL) as np, (SELECT ns.geom FROM zad3."T2019_KAR_BUILDINGS" ns
LEFT JOIN zad3."T2018_KAR_BUILDINGS" pop ON ns.geom = pop.geom		
WHERE pop.id IS NULL AND pop.geom IS NULL) as bud
WHERE ST_Contains(ST_Buffer(bud.geom,500),np.geom)
GROUP BY np.poi_name

--suma
SELECT COUNT(wynik.*) FROM (SELECT np.poi_name FROM (SELECT poi19.* FROM zad3."T2019_KAR_POI_TABLE" as poi19
LEFT JOIN zad3."T2018_KAR_POI_TABLE" as poi18 ON poi18.id = poi19.id
WHERE poi18.id IS NULL) as np, (SELECT ns.geom FROM zad3."T2019_KAR_BUILDINGS" ns
LEFT JOIN zad3."T2018_KAR_BUILDINGS" pop ON ns.geom = pop.geom		
WHERE pop.id IS NULL AND pop.geom IS NULL) as bud
WHERE ST_Contains(ST_Buffer(bud.geom,500),np.geom)
GROUP BY np.poi_name) as wynik









--ok
-- zad3 - Utwórz nową tabelę o nazwie ‘streets_reprojected’, która zawierać będzie 
-- dane z tabeli T2019_KAR_STREETS przetransformowane do układu współrzędnych DHDN.Berlin/Cassini

ST_Transform(A.geom, 3068)

CREATE TABLE zad3.streets_reprojected AS (SELECT A.id, ST_Transform(A.geom, 3068), A.link_id, A.st_name,
A.ref_in_id, A.nref_in_id, A.func_class, A.speed_cat, A.fr_speed_l, A.to_speed_l, A.dir_travel FROM zad3."T2019_KAR_STREETS" AS A);

SELECT * FROM zad3.streets_reprojected

--ok
-- zad4 - Stwórz tabelę o nazwie ‘input_points’ i dodaj do niej dwa rekordy o geometrii punktowej. 
-- Użyj następujących współrzędnych:
DROP table zad3.input_points
CREATE TABLE zad3.input_points(
	id_pkt SERIAL PRIMARY KEY,
	geom geometry NOT NULL
	
);

--trzeba przyjac uklad WGS84 (srid = 4326)

8.36093 49.03174 

8.39876 49.00644


INSERT INTO zad3.input_points VALUES (DEFAULT, ST_GeomFromText('POINT(8.36093 49.03174)'));
INSERT INTO zad3.input_points VALUES (DEFAULT, ST_GeomFromText('Point(8.39876 49.00644)'));

--ustawienie ukladu wspolrzednych na wgs84
UPDATE zad3.input_points SET geom = St_SetSRID(geom, 4326)

SELECT ST_AsText(geom) FROM zad3.input_points

--sprawdzenie ukladu
SELECT ST_Srid(geom) FROM zad3.input_points

SELECT * FROM zad3.input_points

--0k
--zad5 - Zaktualizuj dane w tabeli ‘input_points’ tak, 
--aby punkty te były w układzie współrzędnych DHDN.Berlin/Cassini. 
--Wyświetl współrzędne za pomocą funkcji ST_AsText().


UPDATE zad3.input_points SET geom = ST_Transform(geom, 3068)
SELECT ST_Srid(geom) FROM zad3.input_points


SELECT ST_AsText(geom) FROM zad3.input_points

--ok
--zad6 - Znajdź wszystkie skrzyżowania, które znajdują się w odległości 200 m od linii zbudowanej
-- z punktów w tabeli ‘input_points’. Wykorzystaj tabelę T2019_STREET_NODE. 
--Dokonaj reprojekcji geometrii, aby była zgodna z resztą tabel

--sprawdzenie geometrii obu tabel
SELECT ST_Srid(geom) FROM zad3."T2019_KAR_STREET_NODE" 
SELECT ST_Srid(geom) FROM zad3.input_points

--trzeba zmienic uklad, zamienicmy input points na 4326
UPDATE zad3.input_points SET geom = ST_Transform(geom, 4326)


--linia zbudowana z punktow w tabeli input_points
SELECT ST_ShortestLine((SELECT geom FROM zad3.input_points AS i WHERE id_pkt = 1), (SELECT geom FROM zad3.input_points WHERE id_pkt = 2)) 

--bufor 200 wokol tej linii
SELECT ST_Buffer((SELECT ST_ShortestLine((SELECT geom FROM zad3.input_points WHERE id_pkt = 1), 
(SELECT geom FROM zad3.input_points WHERE id_pkt = 2)) 
),200)

--odp
SELECT * FROM zad3."T2019_KAR_STREET_NODE" AS n
WHERE ST_Distance((SELECT ST_ShortestLine((SELECT geom FROM zad3.input_points WHERE id_pkt = 1), (SELECT geom FROM zad3.input_points WHERE id_pkt = 2))
),(n.geom)) < 201
--mozliwe??
AND n.intersect = 'Y'

--ok
-- zad7 -- Policz jak wiele sklepów sportowych (‘Sporting Goods Store’ - tabela POIs) 
--znajduje się w odległości 300 m od parków (LAND_USE_A).

--zrobimy crossjoina kazdego sklepu z kazdym buforem 300 m dla parku

SELECT geom FROM zad3."T2019_KAR_POI_TABLE" B WHERE TYPE = 'Sporting Goods Store'

SELECT ST_Srid(geom) FROM zad3."T2019_KAR_LAND_USE_A" 
SELECT ST_Srid(geom) FROM zad3."T2019_KAR_POI_TABLE" 


SELECT DISTINCT poi.poi_name, poi.type 
FROM zad3."T2019_KAR_POI_TABLE" as poi, zad3."T2019_KAR_LAND_USE_A" as park
--ST_DWithin zwraca true jesli obie geometrie sa wewenatrz danago dystansu
--dla uklad w stopniach
--WHERE ST_DWithin(l.geom, p.geom, 0.0027)
WHERE ST_DWithin(park.geom, poi.geom, 300) 
AND poi.type = 'Sporting Goods Store' 
AND park.type='Park (City/County)'


--ok
--zad8 - Znajdź punkty przecięcia torów kolejowych (RAILWAYS) z ciekami (WATER_LINES). 
--Zapisz znalezioną geometrię do osobnej tabeli o nazwie ‘T2019_KAR_BRIDGES’.

SELECT * FROM zad3."T2019_KAR_WATER_LINES"
SELECT * FROM zad3."T2019_KAR_RAILWAYS"

--finkcja intersection zwraca true gdy dwie geometrie sie przecinaja
SELECT ST_Intersection(a.geom, b.geom) INTO zad3.T2019_KAR_BRIDGES FROM
zad3."T2019_KAR_WATER_LINES" AS a, zad3."T2019_KAR_RAILWAYS" AS b
--GROUP BY st_intersection

SELECT * FROM zad3.T2019_KAR_BRIDGES













